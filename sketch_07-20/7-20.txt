//sketche 7
void Quadr(int a, int b, int c)
{
  double D, x1, x2;
  D = b * b - 4 * a * c;
  if(D>=0)
  {
    x1 =(-b-Math.sqrt(D))/(2*a);
    x2 =(-b+Math.sqrt(D))/(2*a);
    println(x1);
    println(x2);
  }
}


//sketch 8
void Years(int n)
{
  if ((n % 100 >= 10 & n % 100 <= 20) || (n % 10 >= 5 & n % 10 <=9) || (n % 10 == 0))
  {
    print(n);
    println("let");
  }
  else if (n % 10 == 1)
  {
    print(n);
    println("god");
  }
  else if (n % 10 >= 2 & n % 10 <= 4)
  {
    print(n);
    println("goda");
  }
} 


//sketch9
double Lenght(int x1, int x2, int y1, int y2)
{
  return sqrt((x2-x1)*(x2-x1) - (y2-y1)*(y2-y1));
}

//sketch 10
void MultiTable7()
{
  for (int i = 1; i <= 10; i++)
  {
    println(i*7);
  }
}



//11 sketch
int sum(int n)
{
  int result = 0;
  for (int i = 1; i<= n; i++)
  {
    if (i % 2 != 0)
    {
      result += i;
    }
  }
  return result;
}



//sketch 12
int Fact(int n)
{
  int fact = 1;
  if (n == 0)
    return 0;
  if (n == 1)
    return 1;
  for (int i = 2; i <= n; i++)
  {
    fact = fact * i;
  }
  return fact;
}



//sketch 13
int MyPow(int n, int deg)
{
  int result = 1;
  if (deg == 0)
    return 1;
  for (int i = 1; i <= deg; i++)
  {
    result = result * n;
  }
  return result;
}


//sketch15
void Ex15()
{
  for (int i = 100; i <= 999; i++)
  {
    int sum;
    int mul;
    int temp = i;
    
    sum = temp  % 10;
    mul = temp  % 10;
    temp = temp / 10;
    
    sum = sum + (temp  % 10);
    mul = mul * (temp  % 10);
    temp = temp / 10;
   
    sum = sum + (temp  % 10);
    mul = mul * (temp  % 10);
    
    if (sum == mul)
      println(i);
  }
}


//sketch 16
boolean Ex16()
{
  int[] mass;
  mass = new int[100];
  for (int i = 0; i < 100; i++)
  {
    if (mass[i] % 2 != 0)
      return true;
  }
  return false;
}


//sketch17
void Ex17()
{
  int[] mass;
  mass = new int[100];
  int sum = 0;
  int sr_arifm;
  for (int i = 0; i < 100; i++)
  {
    sum = sum + mass[i];
  }
  sr_arifm = sum / 100;
  println(sum);
  println(sr_arifm);
}


//sketch 20
int fib(int n) 
{
    if (n == 1) return 1;
    if (n == 2) return 1;
    return fib(n - 1) + fib(n - 2);
}